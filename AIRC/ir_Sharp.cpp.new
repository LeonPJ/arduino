#include "IRremote.h"
#include "IRremoteInt.h"

//==============================================================================
//                       SSSS  H   H   AAA   RRRR   PPPP
//                      S      H   H  A   A  R   R  P   P
//                       SSS   HHHHH  AAAAA  RRRR   PPPP
//                          S  H   H  A   A  R  R   P
//                      SSSS   H   H  A   A  R   R  P
//==============================================================================

// Sharp and DISH support by Todd Treece: http://unionbridge.org/design/ircommand
//
// The send function has the necessary repeat built in because of the need to
// invert the signal.
//
// Sharp protocol documentation:
//   http://www.sbprojects.com/knowledge/ir/sharp.htm
//
// Here is the LIRC file I found that seems to match the remote codes from the
// oscilloscope:
//   Sharp LCD TV:
//   http://lirc.sourceforge.net/remotes/sharp/GA538WJSA

#define SHARP_BITS             15
#define SHARP_BIT_MARK        245
#define SHARP_ONE_SPACE      1805
#define SHARP_ZERO_SPACE      795
#define SHARP_GAP          600000
#define SHARP_RPT_SPACE      3000

#define SHARP_TOGGLE_MASK  0x3FF

//+=============================================================================
#if SEND_SHARP
void  IRsend::sendSharpRaw (unsigned long data,  int nbits)
{
	enableIROut(38);

	// Sending codes in bursts of 3 (normal, inverted, normal) makes transmission
	// much more reliable. That's the exact behaviour of CD-S6470 remote control.
  
  // My edit begins here
  // Modified by Charles Law
	//     for (int n = 0;  n < 3;  n++) {
  // Only 2 bursts is sent(Normal + Inverted),
  // so that streams of NiNiNiNiNi...etc are sent when repetitive sendSharpRaw
  // is called, just like press and hold a key in an actual Sharp RC.
	for (int n = 0;  n < 2;  n++) {
  // My edit ends here
		for (unsigned long  mask = 1UL << (nbits - 1);  mask;  mask >>= 1) {
			if (data & mask) {
				mark(SHARP_BIT_MARK);
				space(SHARP_ONE_SPACE);
			} else {
				mark(SHARP_BIT_MARK);
				space(SHARP_ZERO_SPACE);
			}
		}

		mark(SHARP_BIT_MARK);
		space(SHARP_ZERO_SPACE);
		delay(40);

		data = data ^ SHARP_TOGGLE_MASK;
	}
}
#endif

//+=============================================================================
// Sharp send compatible with data obtained through decodeSharp()
// 
//
#if SEND_SHARP
void  IRsend::sendSharp (unsigned int address,  unsigned int command)
{
	sendSharpRaw((address << 10) | (command << 2) | 2, SHARP_BITS);
}
#endif

// My code starts here
// Decoder for Sharp protocol
// written by Charles Law, Jan 2016
// 
// Several original Sharp RCs, manufactured from mid 1980s to early 2010s,
// were tested. The mark and space length of these RCs vary a lot. Take mark
// length as example, the shortest mark length found was a little less than 
// 300us while the longest mark length was about 600us. The variation is well
// above the TOLERANCE level defined in IRremote.h, hence it is not possible
// to use the MATCH_MARK function from IRremote.cpp to identify a mark.
// Although mark length of these RCs varies significantly, space length also
// varies, shorter space length is record if mark length is longer, or vice
// versa, so that the sum of mark and space length for a bit remains almost
// the same for all RCs tested, about 2100us for 1 and 1050us for 0. Hence
// this decoder use MATCH function and the sum of mark and space length of
// a bit to identify 1 and 0.
//
#if DECODE_SHARP
bool  IRrecv::decodeSharp (decode_results *results) {
  unsigned long data = 0;
  int OneLength = SHARP_BIT_MARK + SHARP_ONE_SPACE;
  int ZeroLength = SHARP_BIT_MARK + SHARP_ZERO_SPACE;
  int ThisBitLength;
  int offset = 1;       // begins with first mark  
  
  // check total no. of mark & space
  if (irparams.rawlen != 2 * SHARP_BITS + 2) return false;
  
  // read bit
  for (int i = 1; i <= SHARP_BITS; i++) {
    ThisBitLength = results->rawbuf[offset];                         // mark length
    offset++;
    ThisBitLength = ThisBitLength + results->rawbuf[offset];         // plus space length
    offset++;
    if (MATCH(ThisBitLength, OneLength))       data = (data << 1) | 1 ;
    else if (MATCH(ThisBitLength, ZeroLength)) data = (data << 1) | 0 ;
    else                                       return false;
  }
  
  // Success
  results->bits        = SHARP_BITS;
  results->value       = data;
  results->decode_type = SHARP;
}
#endif
// My code ends here